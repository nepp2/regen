
;; This milestone introduced block scope, including "let" and scope-based branching (if/else)

;; It turns blocks into expressions

;; It supports loops through "repeat" and "break" keywords, which jump to the start and end
;; of a block, respectively.

(def factorial (fun (n) (
  (if (< n 2)
    (1)
    ((* n 
      (factorial (- n 1))))
  )
)))

(def factorial_loop (fun (n) (
  (let fact 1)
  (let i 2)
  (let limit (+ n 1))
  (block (
    (if (>= i limit)
      (break))
    (set fact (* fact i))
    (set i (+ i 1))
    repeat
  ))
  fact
)))

(def main (fun () (
  (debug (factorial 3))
  (debug (factorial_loop 3))
)))
