
(load_prelude env)

;; Type {
;;   size_of : u64
;;   kind : Symbol
;;   kind_info : *const ()
;; }

;; define macro_flag
(def macro_type (fun (t) (
  (new_type 8 (sym macro) t)
)))

;; define the macro macro!
(do
  (let macro_function (fun (n) (
    ;; (template (do
    ;;   (let v (fun (#arg) #body))
    ;;   (let t (macro_type (typeof v)))
    ;;   (env_insert env (sym #name) v t)
    ;; ))

    (let nodes (ref (byte_chunk 16)))
    (node_children nodes n)
    (let name (warray_get nodes 0))
    (let arg (warray_get nodes 1))
    (let body (warray_get nodes 2))

    (let arg_list (warray_new))
    (warray_push arg_list arg)

    (let fun_list (warray_new))
    (warray_push fun_list (node_from_symbol (sym fun)))
    (warray_push fun_list (node_from_list arg_list))
    (warray_push fun_list body)
    (let fun_node (node_from_list fun_list))

    (let let_list (warray_new))
    (warray_push let_list (# let))
    (warray_push let_list (# v))
    (warray_push let_list fun_node)

    ;; (sym #name)
    (let sym_list (warray_new))
    (warray_push sym_list (# sym))
    (warray_push sym_list name)

    ;; (env_insert env #name v t)
    (let def_list (warray_new))
    (warray_push def_list (# env_insert))
    (warray_push def_list (# env))
    (warray_push def_list (node_from_list sym_list))
    (warray_push def_list (# v))
    (warray_push def_list (# t))

    (let do_list (warray_new))
    (warray_push do_list (# do))
    (warray_push do_list (node_from_list let_list))
    (warray_push do_list (# (let t (macro_type (typeof v))) ))
    (warray_push do_list (node_from_list def_list))

    (node_from_list do_list)
  )))
  (let t (macro_type (typeof macro_function)))
  (env_insert env (sym macro) macro_function t)
)

(macro function node (
  (let slice (ref (byte_chunk 16)))
  (node_children slice node)
  (let name (warray_get slice 0))
  (let args (warray_get slice 1))
  (let body (warray_get slice 2))

  (let fun_list (warray_new))
  (warray_push fun_list (node_from_symbol (sym fun)))
  (warray_push fun_list args)
  (warray_push fun_list body)
  (let fun_node (node_from_list fun_list))
  
  (let def_list (warray_new))
  (warray_push def_list (node_from_symbol (sym def)))
  (warray_push def_list name)
  (warray_push def_list fun_node)
  
  (node_from_list def_list)
))

(function add (a b) (
  (+ a b)
))

(debug (add 5 6))

;; (template
;;   (def #name (fun #args #body))
;; )
