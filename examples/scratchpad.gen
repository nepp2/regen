
(load_prelude env)

;; define macro_flag
(def macro_type (fun (t) (
  (new_type 8 (sym macro) t)
)))

;; define the macro macro!
(do
  (let macro_function (fun (n) (
    (let nodes (ref (byte_chunk 16)))
    (node_children nodes n)
    (let name (warray_get nodes 0))
    (let arg (warray_get nodes 1))
    (let body (warray_get nodes 2))
    (# (do
      (let v (fun (($ arg)) ($ body)))
      (let t (macro_type (typeof v)))
      (env_insert env (sym ($ name)) v t)
    ))
  )))
  (let t (macro_type (typeof macro_function)))
  (env_insert env (sym macro) macro_function t)
)

(macro warray node (
  (let cs (ref (byte_chunk 16)))
  (node_children cs node)
  (let len (warray_len cs))
  (let do_list (warray_new))
  (warray_push do_list (sym do))
  (warray_push do_list (# (let a (warray_new))))
  (let i 0)
  (block (
    (if (! (< i len)) (break))
    (let c (warray_get cs i))
    (let n (# (warray_push a ($ c))))
    (warray_push do_list n)
    (set i (+ i 1))
    repeat
  ))
))

(macro function node (
  (let slice (ref (byte_chunk 16)))
  (node_children slice node)
  (let name (warray_get slice 0))
  (let args (warray_get slice 1))
  (let body (warray_get slice 2))
  (# (def ($ name) (fun ($ args) ($ body))))
))

(function add (a b) (
  (+ a b)
))

(debug (add 5 6))
