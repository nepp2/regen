
include(env, ref "examples/lib/prelude.gen");
include(env, ref "examples/lib/sdl2.gen");

def create_game_window = fun(title : string, width : i64, height : i64) {
  sdl_init(SDL_INIT_VIDEO);
  sdl_create_window(
    title.data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
    width as i32, height as i32, SDL_WINDOW_SHOWN)
};

def create_renderer = fun(window : sdl_window_handle) {
  sdl_create_renderer(window, -1 as i32, SDL_RENDERER_ACCELERATED)
}

def tick_event_tag = 1;
def sdl_event_tag = 2;

// one of these pointers will be null
def game_event = struct {
  tag : i64,
  input : sdl_event,
  tick : i64,
};

def poll_sdl_input = fun(ge : ptr game_event, tick : ptr i64) {
  let e = zero_init sdl_event;
  if sdl_poll_event(ref e) == (1 as i32) {
    *ge = init game_event(sdl_event_tag, e, *tick);
  }
  else {
    false
  }
};

def tick_to_game_event = fun(output : ptr game_event, tick : ptr i64) {
  let e  =
    init game_event(tick_event_tag, zero_init sdl_event, *tick);
  *output = e;
};

def window = create_game_window("SDL Test", 800, 600);

reactive input_tick = create_timer(10);

reactive sdl_input = stream(observe input_tick, poll_sdl_input);

reactive frame_tick = create_timer(1000/30);

def frame_event = init game_event(tick_event_tag, zero_init sdl_event, frame_tick);

def event = {
  if sdl_input.tick > frame_event.tick {
    sdl_input
  }
  else {
    frame_event
  }
}

reactive sample_timer = create_timer(1000);

reactive sample = stream(observe sample_timer, fun(e : ptr game_event, tick : ptr i64) {
  *e = event;
});

print sample;


// def game_input_signal = fun(input_signal : signal, tick_signal : tick_event_signal) {
//   let input = map_signal(input_signal, game_event, input_to_game_event as map_fn_type);
//   let ticks = map_signal(tick_signal as signal, game_event, tick_to_game_event as map_fn_type);
//   merge_signal(input, ticks, game_event)
// };


// reactive tick = create_timer(1000);

// def seconds = tick / 1000;

// def input = 10;

// def sum_fold = fun(sum : ptr i64, val : ptr i64) {
//   *sum = *sum + *val;
// }

// reactive sum = container(observe input, 0, sum_fold);

// def poll_evens = fun(val : ptr i64, input : ptr i64) {
//   let v = *input;
//   let even = (v / 2) * 2 == v;
//   if even {
//     *val = *input;
//   }
//   even
// }

// reactive evens = stream(observe input, poll_evens);

// print evens;

// print seconds + evens;

// def bleb = 5;

// def blub = bleb;

// print blub;