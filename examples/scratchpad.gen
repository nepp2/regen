
include(env, ref "examples/lib/prelude.gen");
include(env, ref "examples/lib/list.gen");

embed define_list_type(#list_i64, #i64);

def vs = list_i64::new();

list_i64::add(vs, 6);

print list_i64::get(vs, 0);

reactive tick = create_timer(1000);

def seconds = tick / 1000;

def input = 40;

def sum_fold = fun(sum : ptr i64, val : ptr i64) {
  *sum = *sum + *val;
}

reactive sum = create_container(
  (observe input) as signal,
  i64,
  (ref 0) as ptr void,
  sum_fold as update_fn
);

print sum;

def even_poll = fun(val : ptr i64, input : ptr i64) {
  let v = *input;
  let even = (v / 2) * 2 == v;
  if even {
    *val = *input;
  }
  even
}

reactive evens = create_poll(
  (observe input) as signal,
  i64,
  even_poll as poll_fn
);

print evens;

