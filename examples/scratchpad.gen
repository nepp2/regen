
include(env, ref "examples/lib/prelude.gen");
include(env, ref "examples/lib/sdl2.gen");

def create_game_window = fun(title : string, width : i64, height : i64) {
  sdl_init(SDL_INIT_VIDEO);
  sdl_create_window(
    title.data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
    width as i32, height as i32, SDL_WINDOW_SHOWN)
};

def create_renderer = fun(window : sdl_window_handle) {
  sdl_create_renderer(window, -1 as i32, SDL_RENDERER_ACCELERATED)
}

def tick_event_tag = 1;
def sdl_event_tag = 2;

// one of these pointers will be null
def game_event = struct {
  tag : i64,
  input : sdl_event,
  tick : i64,
};

def poll_sdl_input = fun(ge : ptr game_event, tick : ptr i64) {
  let e = zero_init sdl_event;
  if sdl_poll_event(ref e) == (1 as i32) {
    *ge = init game_event(sdl_event_tag, e, *tick);
    true
  }
  else {
    false
  }
};

def game = struct {
  ticker : i64,
}

def width = 800;
def height = 600;

def window = create_game_window("SDL Test", width, height);

reactive input_tick = create_timer(10);

reactive sdl_input = stream(observe input_tick, poll_sdl_input);

def game_update = fun(state : ptr game, e : ptr game_event) {
  // handle input events
  if e.tag == sdl_event_tag {
    if e.input.event_type == SDL_QUIT {
      sdl_destroy_window(window);
    }
  }
  // handle time events
  if e.tag == tick_event_tag {
    state.ticker = state.ticker + 4;
    if state.ticker > 400 {
      state.ticker = 0;
    } 
  }
}

def initial_game_state = init game(0);

def renderer =
  sdl_create_renderer(window, -1 as i32, SDL_RENDERER_ACCELERATED);

def render_game = fun (r : sdl_renderer_handle, game_state : ptr game) {
  // render
  sdl_set_draw_color(r, 0 as u8, 0 as u8, 0 as u8, 0 as u8);
  sdl_clear(r);

  sdl_set_draw_color(r, 255 as u8, 0 as u8, 0 as u8, 255 as u8);

  let x = 50 + game_state.ticker;

  let rect = init sdl_rect(x as i32, 50 as i32, 300 as i32, 200 as i32);

  sdl_fill_rect(r, ref rect);
  sdl_present(r);
};

reactive frame_tick = create_timer(1000/30);

def frame_event = init game_event(tick_event_tag, zero_init sdl_event, frame_tick);

def event = {
  if sdl_input.tick > frame_event.tick {
    sdl_input
  }
  else {
    frame_event
  }
}

reactive game_state = container(observe event, init game(0), game_update);

reactive render_tick = create_timer(1000 / 60);

reactive render_sample = stream(
  observe render_tick,
  fun(sample : ptr game, tick : ptr i64) {
    *sample = game_state;
    true
  }
);

render_game(renderer, ref render_sample);



