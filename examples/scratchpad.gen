
(include env (ref "examples/lib/prelude.gen"))
(include env (ref "examples/lib/sdl2.gen"))

(def title (array (65 u8) (65 u8) (65 u8) (0 u8)))

(sdl_init SDL_INIT_VIDEO)

(def win
  (sdl_create_window
    (ref (index title 0))
    SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED
    (800 u32) (600 u32)
    SDL_WINDOW_SHOWN))

(def renderer
  (sdl_create_renderer win u32_max SDL_RENDERER_ACCELERATED))

(def color (struct
  (r u8)
  (g u8)
  (b u8)
))

(def red (init color (255 u8) (0 u8) (50 u8)))
(def green (init color (0 u8) (255 u8) (0 u8)))
(def blue (init color (50 u8) (100 u8) (255 u8)))
(def sky_blue (init color (50 u8) (200 u8) (255 u8)))
(def orange (init color (255 u8) (150 u8) (50 u8)))
(def yellow (init color (255 u8) (200 u8) (0 u8)))
(def magenta (init color (255 u8) (80 u8) (255 u8)))

(def shape (struct
  (data (ptr u64))
  (len u64)
  (c color)
))

(def to_shape (macro ns (do
  (let s (node_index ns 0))
  (let len (node_index ns 1))
  (let c (node_index ns 2))
  (# (init shape (ref (index ($ s) 0)) ($ len) ($ c)))
)))

(def shape_l1 (array
  0 1 0
  0 1 0
  0 1 1
))

(def shape_l2 (array
  0 1 0
  0 1 0
  1 1 0
))

(def shape_bar (array
  0 1 0 0
  0 1 0 0
  0 1 0 0
  0 1 0 0
))

(def shape_z (array
  0 0 0
  1 1 0
  0 1 1
))

(def shape_s (array
  0 0 0
  0 1 1
  1 1 0
))

(def shape_square (array
  1 1
  1 1
))

(def shape_t (array
  0 1 0
  1 1 1
  0 0 0
))

(def shapes (array
  (to_shape shape_l1 3 orange)
  (to_shape shape_l2 3 blue)
  (to_shape shape_bar 4 sky_blue)
  (to_shape shape_z 3 red)
  (to_shape shape_s 3 green)
  (to_shape shape_square 2 yellow)
  (to_shape shape_t 3 magenta)
))

(def tile_size 30)

(def draw_tetronimo (fun ((xpos u64) (ypos u64) (s shape)) (do
  (let data (. s data))
  (let len (. s len))
  (let c (. s c))
  (let ts tile_size)
  (for y 0 len (do
    (for x 0 len (do
      (let v (index data (+ x (* y len))))
      (if v (do
        (sdl_set_draw_color renderer (. c r) (. c g) (. c b) (255 u8))
        (let r (init sdl_rect
          (* (+ xpos x) ts)
          (* (+ ypos y) ts)
          ts ts)
        )
        (sdl_fill_rect renderer (ref r))
      ))
    ))
  ))
)))

(label loop (do
  (let e (zero_init sdl_event))
  (if (== (1 u32) (sdl_poll_event (ref e)))
    (if (== (. e event_type) SDL_QUIT)
      (break loop)
    )
  )
  (sdl_set_draw_color renderer (0 u8) (0 u8) (0 u8) (0 u8))
  (sdl_clear renderer)
  
  (for i 0 (array_len shapes) (do
    (draw_tetronimo (+ 1 (* i 4)) 2 (index shapes i))
  ))

  (sdl_present renderer)
  (repeat loop)
))
