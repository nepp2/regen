
(load_prelude env)

;; (template
;;   (def #name (fun #args #body))
;; )

(def function (fun (n) (
  (let slice (ref (byte_chunk 16)))
  (node_children slice n)
  (let name (warray_get slice 0))
  (let args (warray_get slice 1))
  (let body (warray_get slice 2))

  (let fun_list (warray_new))
  (warray_push fun_list (node_from_symbol (sym fun)))
  (warray_push fun_list args)
  (warray_push fun_list body)
  (let fun_node (node_from_list fun_list))
  
  (let def_list (warray_new))
  (warray_push def_list (node_from_symbol (sym def)))
  (warray_push def_list name)
  (warray_push def_list fun_node)
  (node_from_list def_list)
)))

(block (
  (let node (function (# (
    add (a b) (
      (+ a b)
    )
  ))))
  (node_display node)
  (eval env node)
))

(def main (fun () (
  (debug (add 5 6))
)))
