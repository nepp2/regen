
(include env (ref "examples/lib/prelude.gen"))
(include env (ref "examples/lib/sdl2.gen"))

(def title (array (65 u8) (65 u8) (65 u8) (0 u8)))

(sdl_init SDL_INIT_VIDEO)

(def win
  (sdl_create_window
    (ref (index title 0))
    SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED
    (800 u32) (600 u32)
    SDL_WINDOW_SHOWN))

(def renderer
  (sdl_create_renderer win u32_max SDL_RENDERER_ACCELERATED))

(def color (struct (r u8) (g u8) (b u8)))

(def to_color (fun ((r u64) (g u64) (b u64))
  (init color (cast r u8) (cast g u8) (cast b u8))
))

(def red (to_color 255 0 50))
(def green (to_color 0 255 0))
(def blue (to_color 50 100 255))
(def sky_blue (to_color 50 200 255))
(def orange (to_color 255 150 50))
(def yellow (to_color 255 200 0))
(def magenta (to_color 255 80 255))

(def shape (struct
  (data (ptr u64))
  (len u64)
  (c color)
))

(def to_shape (macro ns (do
  (let s (node_index ns 0))
  (let len (node_index ns 1))
  (let c (node_index ns 2))
  (# (init shape (ref (index ($ s) 0)) ($ len) ($ c)))
)))

(def shape_l1 (array
  0 1 0
  0 1 0
  0 1 1
))

(def shape_l2 (array
  0 1 0
  0 1 0
  1 1 0
))

(def shape_bar (array
  0 1 0 0
  0 1 0 0
  0 1 0 0
  0 1 0 0
))

(def shape_z (array
  0 0 0
  1 1 0
  0 1 1
))

(def shape_s (array
  0 0 0
  0 1 1
  1 1 0
))

(def shape_square (array
  1 1
  1 1
))

(def shape_t (array
  0 1 0
  1 1 1
  0 0 0
))

(def shapes (array
  (to_shape shape_l1 3 orange)
  (to_shape shape_l2 3 blue)
  (to_shape shape_bar 4 sky_blue)
  (to_shape shape_z 3 red)
  (to_shape shape_s 3 green)
  (to_shape shape_square 2 yellow)
  (to_shape shape_t 3 magenta)
))

(def tile_size 30)

(def cell (struct
  (c color)
  (filled bool)
))

(def grid_width 10)
(def grid_height 24)
(def grid_size (* grid_width grid_height))

(def grid (sized_array cell grid_size))

(def blit (fun ((g (ptr grid)) (s (ptr shape)) (off_x u64) (off_y u64)) (do
  (let len (. s len))
  (let c (. s c))
  (for y 0 len (do
    (for x 0 len (do
      (let v (index (. s data) (+ x (* y len))))
      (if (== v 1) (do
        (let xpos (+ x off_x))
        (let ypos (+ y off_y))
        (let i (+ xpos (* ypos grid_width)))
        (set (index (* g) i) (init cell c true))
      ))
    ))
  ))
)))

(def set_draw_color (fun ((c color)) (do
  (sdl_set_draw_color renderer (. c r) (. c g) (. c b) (255 u8))
)))

(def draw_grid (fun ((x_offset u64) (y_offset u64) (g (ptr grid))) (do
  (let ts tile_size)
  (for y 0 grid_height (do
    (for x 0 grid_width (do
      (let cell (index (* g) (+ x (* y grid_width))))
      (if (. cell filled) (do
        (set_draw_color (. cell c))
        (let r (init sdl_rect
          (+ (* x ts) x_offset)
          (+ (* y ts) y_offset)
          ts ts)
        )
        (sdl_fill_rect renderer (ref r))
      ))
    ))
  ))
)))

(def draw_tetronimo (fun ((x_offset u64) (y_offset u64) (s shape)) (do
  (let len (. s len))
  (let ts tile_size)
  (for y 0 len (do
    (for x 0 len (do
      (let v (index (. s data) (+ x (* y len))))
      (if (== v 1) (do
        (set_draw_color (. s c))
        (let r (init sdl_rect
          (+ (* x ts) x_offset)
          (+ (* y ts) y_offset)
          ts ts
        ))
        (sdl_fill_rect renderer (ref r))
      ))
    ))
  ))
)))

(def state (struct
  (g grid)
))

(def initial_state (fun () (do 
  (init state (zero_init grid))
)))

(def update (fun ((e (ptr sdl_event))) (do
  (if (== (. e event_type) SDL_KEYDOWN) (do
    (debug (. e event_type))
    (let ke (to_keyboard_event e))
    (debug (. (. ke keysym) sym))
  ))
)))

(do
  (let s (initial_state))

  (blit (ref (. s g)) (ref (index shapes 4)) 4 5)

  (label loop (do
    (let e (zero_init sdl_event))

    ;; handle events
    (if (== (1 u32) (sdl_poll_event (ref e))) (do
      (if (== (. e event_type) SDL_QUIT)
        (break loop)
      )
      (update (ref e))
    ))

    ;; render
    (sdl_set_draw_color renderer (0 u8) (0 u8) (0 u8) (0 u8))
    (sdl_clear renderer)
    
    (for i 0 (array_len shapes) (do
      (draw_tetronimo (* i 110) 30 (index shapes i))
    ))

    (draw_grid 30 30 (ref (. s g)))

    (sdl_present renderer)
    (repeat loop)
  ))
)
