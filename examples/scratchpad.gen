
;; primitives

(debug 5) ;; 5
(debug (typeof 5)) ;; u64
(debug (typeof u32)) ;; type

;; pointers

(debug (ptr u64)) ;; (ptr u64)
(debug (typeof (ptr u64))) ;; type

(do
  (let p (cast (malloc 8) (ptr u64)))
  (set (* p) 500)
  (debug (* p)) ;; 500
  (let local 1000)
  (debug (* (ref local))) ;; 1000
)

;; tuples

(def pos (tuple u64 u64))
(debug (typeof pos)) ;; type

(do
  (let v (init pos 20 30))
  (debug (. v 0)) ;; 20
  (debug (. v 1)) ;; 30

  ;; field assignment
  (set (. v 1) 100)
  (debug (. v 1)) ;; 100
)

;; ;; structs

;; (def pos2 (struct (x i64) (y i64)))
;; (debug (typeof pos2)) ;; type

;; (do
;;   (let v (init pos2 40 50))
;;   (debug (. v x)) ;; 40
;;   (debug (. v y)) ;; 50

;;   ;; field assignment
;;   (debug (do 
;;     (set (. v y) 100)
;;     (. v y) ;; 100
;;   ))
;; )

;; ;; strings

;; (debug (typeof "hello")) ;; (ptr u8)

;; ;; arrays

;; (do
;;   (let a (array 1 2 3 4))
;;   (debug (typeof a)) ;; (array u64 4)
;;   (debug (index a 0)) ;; 1
;;   (let p (ref (index a 0)))
;;   (debug (index p 3)) ;; 4
;; )

;; ;; conditions

;; (debug (if (> 3 5) 3 5)) ;; 5

;; ;; functions

;; (def add (fun (a i64) (b i64)
;;   (+ a b)
;; ))

;; (debug (typeof add)) ;; (fn (i64 i64) i64)

;; (debug (add 6 7)) ;; 13

;; ;; labelled blocks

;; (block foo
;;   (if true (do
;;     (debug "success")
;;     (break foo)
;;   ))
;;   (debug "failure")
;; )

;; ;; macros and loops

;; (def while
;;   (macro (condition body)
;;     (# (block
;;       (if ($ condition)
;;         ($ body)
;;         break
;;       )
;;       repeat
;;     ))
;;   )
;; )

;; (do
;;   (let i 0)
;;   (while (< i 10) (set i (i + 1)))
;;   (debug i) ;; 10
;; )
