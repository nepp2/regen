
def create_window = fun(title : string, width : i64, height : i64) {
  sdl_init(SDL_INIT_VIDEO);
  sdl_create_window(
    title.data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
    width as i32, height as i32, SDL_WINDOW_SHOWN)
};

def create_renderer = fun(window : SdlWindowHandle) {
  sdl_create_renderer(window, -1 as i32, SDL_RENDERER_ACCELERATED)
}

def tick_event_tag = 1;
def sdl_event_tag = 2;

// one of these pointers will be null
def Event = struct {
  tag : i64,
  input : SdlEvent,
  tick : i64,
};

embed define_list_type(#EventList, #Event);

def poll_input = fun(es : EventList, tick : i64) {
  let start_len = es.length;
  let e = zero_init SdlEvent;
  while sdl_poll_event(ref e) == (1 as i32) {
    let event = init Event(sdl_event_tag, e, tick);
    EventList::add(es, event);
  }
  let changed = es.length > start_len;
  changed
}

def flush_and_poll_input = fun(es : EventList, tick : i64) {
  if es.length > 0 {
    EventList::clear(es);
    poll_input(es, tick);
    true
  }
  else {
    poll_input(es, tick)
  }
}

def MergeBuffer = struct {
  list : EventList,
  prev_tick : i64,
}

def new_merge = fun() {
  let list = EventList::new();
  init MergeBuffer(list, 0)
}

def merge_events = fun(buf : ptr MergeBuffer, es : EventList) {
  let highest_tick = buf.prev_tick;
  for i in 0 to es.length {
    let e = EventList::get(es, i);
    if e.tick > buf.prev_tick {
      EventList::add(buf.list, e);
      if e.tick > highest_tick {
        highest_tick = e.tick;
      }
    }
  }
  buf.prev_tick = highest_tick;
}

def merge_update = fun(
  buf : ptr MergeBuffer,
  a : EventList,
  b : EventList,
)
{
  let changed = buf.list.length > 0;
  EventList::clear(buf.list);
  merge_events(buf, a);
  merge_events(buf, b);
  if buf.list.length > 0 {
    changed = true;
  }
  changed
}
