
// example usage:
// embed define_list_type(#list_i32, #i32);

def define_list_type = fun(name : expr, t : expr) {
  #(def $name = {
      def T = $t;

      def inner = struct { data : ptr ($name)::T, length : i64, capacity : i64 };

      def list = ptr ($name)::inner;

      def new = fun() {
        let list = malloc(type_sizeof(($name)::inner)) as ptr ($name)::inner;
        *list = init ($name)::inner(0 as ptr ($name)::T, 0, 0);
        list
      };

      def slice = fun(l : ($name)::list, length : i64) {
        let list = malloc(type_sizeof(($name)::inner)) as ptr ($name)::inner;
        *list = init ($name)::inner(l.data, length, l.capacity);
        list
      };

      def clear = fun(l : ($name)::list) {
        l.length = 0;
      };

      def add = fun(l : ($name)::list, v : ($name)::T) {
        if l.length == l.capacity {
          let new_cap =
            if l.capacity == 0 { 8 }
            else { l.capacity * 2 };
          let new_data = malloc(
            type_sizeof(($name)::T) * (new_cap as u64)) as ptr ($name)::T;
          for i in 0 to l.length {
            ptr_index(new_data, i) = ptr_index(l.data, i);
          }
          if l.capacity > 0 {
            free(l.data as ptr void)
          }
          l.data = new_data;
          l.capacity = new_cap;
        }
        ptr_index(l.data, l.length) = v;
        l.length = l.length + 1;
      };

      def append = fun(l : ($name)::list, from : ($name)::list) {
        for i in 0 to from.length {
          let v = ptr_index(from.data, i);
          ($name)::add(l, v);
        }
      };

      def get = fun(l : ($name)::list, i : i64) {
        ptr_index(l.data, i)
      }

      def get_ptr = fun(l : ($name)::list, i : i64) {
        ref ptr_index(l.data, i)
      }

      def set = fun(l : ($name)::list, i : i64, v : ($name)::T) {
        ptr_index(l.data, i) = v;
      }

      ($name)::list
  });
};
