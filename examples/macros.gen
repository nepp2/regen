
;; milestone: implement macro evaluation

;; features required:
;; - defmacro support
;; - aggressive macro expansion

;; intrinsics required: compile_function, to_symbol

(block (
  (let f (fun (ns) (
    (let name (index ns 0))
    (let val (index ns 1))
    (template
      (ccall env_insert env ($ name) ($ val) u64)
    )
  )))
  (ccall env_insert env (sym def) f macro_flag)
))


(defmacro def (env symbol_expr value_expr) (
  (let sym (to_symbol symbol_expr))
  (let f (compile_function env () value_expr))
  (let v (f))
  (env_insert symbol v)
))

(defmacro eval (env expr) (
  (let f (compile_function env () expr))
  (f)
))

(defmacro fun (env args body) (
  (compile_function env args body)
))


;; (let rect_type (block (
;;   (let fields (ref (alloca 16)))
;;   (warray_init fields 4 8)
;;   (warray_set fields 0 u32)
;;   (warray_set fields 1 u32)
;;   (warray_set fields 2 u32)
;;   (warray_set fields 3 u32)
;;   (new_struct_type (sym r) fields)
;; )))

;; (def init (macro ns (
;;   (let name (index ns 0))
;;   (let args (index ns 1))
;;   (let body (index ns 2))
;; )))

;; (def rect (struct i32 i32 i32 i32))

(def function (macro ns (
  (let name (index ns 0))
  (let args (index ns 1))
  (let body (index ns 2))
  (template
    (def #name (fun #args #body))
  )
)))

(function main ()
  (let r (init rect 1 2 3 4))

  (print "size of ")
  (println size_of rect)

  (debug (size_of rect_type))
  (print_symbol (type_id rect_type))

  (if (test_struct r)
    ((print_symbol (sym SUCCESS)))
    ((print_symbol (sym FAILED)))
  )
)
