// Creating functions

// Is there a reason to enforce a rule against runtime eval-style functions?

// I think the main reason is that eval will link to global symbols, but those dependencies aren't tracked, and so hotloading breaks.

def a = 5;

def blah = fun(e : Expr) {
  eval(e)
}

let v = blah(#a);

// `v` depends on `a`, but that is not detected.


def a = 5;

def blah = graph(e : Expr) {
  def v = embed e;

  v
}

def v = blah(#a);

// A graph is a function that takes const exprs as inputs

// This isn't good enough for templates or overloading

add(3, 4);

add("hello ", "world");

def add = graph(a, b) {
  if a == i64 && b == i64 {
    return add_i64;
  }
  if a == string && b == string {
    return add_string;
  }
  add_i64
};
