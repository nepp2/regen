
;; milestone: implement macro evaluation

;; features required:
;; - defmacro support
;; - aggressive macro expansion

;; intrinsics required: compile_function, to_symbol

(defmacro def (env symbol_expr value_expr) (
  (let sym (to_symbol symbol_expr))
  (let f (compile_function env () value_expr))
  (let v (f))
  (env_insert symbol v)
))

(defmacro eval (env expr) (
  (let f (compile_function env () expr))
  (f)
))

(defmacro fun (env args body) (
  (compile_function env args body)
))
