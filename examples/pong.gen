
embed import("examples/lib/list.gen");
embed import("examples/lib/sdl2.gen");
embed import("examples/lib/window.gen");
embed import("examples/scrub/scrub.gen");

def width = 800;
def height = 600;

def paddle_height = 50;
def paddle_speed = 10;
def ball_size = 10;

def window = create_window("Pong", width, height);
def window_id = sdl_get_window_id(window);

def Vec2 = struct { x : i64, y : i64 };

def Ball = struct { pos : Vec2, vel : Vec2 };

def Paddle = struct {
  pos : Vec2,
  width : i64,
  height : i64,
  vel : i64
};

def Pong = struct {
  p1 : Paddle,
  p2 : Paddle,
  b : Ball,
};

def BufferedPong = struct {
  event_count : i64,
  initial_state : Pong,
  state : Pong,
};

def initial_pong_state = {
  let ypos = (height - paddle_height) / 2;
  let b = init Ball(
    init Vec2((width - ball_size) / 2, (height - ball_size) / 2),
    init Vec2(5, 5),
  );
  init Pong(
    init Paddle(init Vec2(50, ypos), 5, paddle_height, 0),
    init Paddle(init Vec2(740, ypos), 5, paddle_height, 0),
    b,
  )
};

def new_buffered_pong = fun(g : Pong) {
  init BufferedPong(0, g, g);
};

def ARROW_RIGHT = 79 as u32;
def ARROW_LEFT = 80 as u32;
def ARROW_DOWN = 81 as u32;
def ARROW_UP = 82 as u32;

def pong_update = fun(state : ptr Pong, e : ptr Event) {
  // handle input events
  if e.tag == sdl_event_tag {
    let event_type = e.input.event_type;
    if event_type == SDL_QUIT {
      sdl_destroy_window(window);
    }
    if event_type == SDL_KEYDOWN {
      let k = to_keyboard_event(ref e.input);
      if k.window_id == window_id {
        if k.keysym.scancode == ARROW_DOWN {
          state.p1.vel = paddle_speed;
        }
        if k.keysym.scancode == ARROW_UP {
          state.p1.vel = -paddle_speed;
        }
      }
    }
    if event_type == SDL_KEYUP {
      let k = to_keyboard_event(ref e.input);
      if k.window_id == window_id {
        if k.keysym.scancode == ARROW_DOWN {
          state.p1.vel = 0;
        }
        if k.keysym.scancode == ARROW_UP {
          state.p1.vel = 0;
        }
      }
    }
  }
  // handle tick events
  if e.tag == tick_event_tag {
    // move the paddles
    state.p1.pos.y = state.p1.pos.y + state.p1.vel;
    state.p2.pos.y = state.p2.pos.y + state.p2.vel;

    // move the ball
    let b = ref state.b;
    let prev_ball_pos = b.pos;
    b.pos.x = b.pos.x + b.vel.x;
    b.pos.y = b.pos.y + b.vel.y;
    // collide with walls
    if b.pos.x > width - ball_size {
      b.pos.x = width - ball_size;
      b.vel.x = -b.vel.x;
    }
    if b.pos.x < 0 {
      b.pos.x = 0;
      b.vel.x = -b.vel.x;
    }
    if b.pos.y > height - ball_size {
      b.pos.y = height - ball_size;
      b.vel.y = -b.vel.y;
    }
    if b.pos.y < 0 {
      b.pos.y = 0;
      b.vel.y = -b.vel.y;
    }

    // collide with paddle
    let p1 = ref state.p1;
    let p2 = ref state.p2;
    let p1_x = p1.pos.x + p1.width;
    if b.pos.x < p1_x {
      if prev_ball_pos.x >= p1_x {
        if b.pos.y >= p1.pos.y {
          if b.pos.y <= p1.pos.y + p1.height {
            b.pos.x = p1_x;
            b.vel.x = -b.vel.x;
          }
        }
      }
    }
    let p2_x = p2.pos.x;
    if b.pos.x > p2_x {
      if prev_ball_pos.x <= p2_x {
        if b.pos.y >= p2.pos.y {
          if b.pos.y <= p2.pos.y + p2.height {
            b.pos.x = p2_x;
            b.vel.x = -b.vel.x;
          }
        }
      }
    }
  }
};

def render_game = fun(r : SdlRendererHandle, state : ptr Pong) {
  // render
  sdl_set_draw_color(r, 0 as u8, 0 as u8, 0 as u8, 0 as u8);
  sdl_clear(r);

  sdl_set_draw_color(r, 255 as u8, 0 as u8, 0 as u8, 255 as u8);

  // Paddle p1
  let rect = init SdlRect(state.p1.pos.x as i32, state.p1.pos.y as i32, 10 as i32, state.p1.height as i32);
  sdl_fill_rect(r, ref rect);

  // Paddle p2
  let rect = init SdlRect(state.p2.pos.x as i32, state.p2.pos.y as i32, 10 as i32, state.p2.height as i32);
  sdl_fill_rect(r, ref rect);

  // Ball
  let rect = init SdlRect(state.b.pos.x as i32, state.b.pos.y as i32, ball_size as i32, ball_size as i32);
  sdl_fill_rect(r, ref rect);

  sdl_present(r);
};

def min = fun(a : i64, b : i64) { if a < b { a } else { b } }

def buffered_pong_update = fun(g : ptr BufferedPong, buffer : ptr EventList) {
  let len = buffer.length;
  if g.event_count > len {
    g.event_count = 0;
    g.state = g.initial_state;
  }
  for i in g.event_count to len {
    let e = EventList::get_ptr(*buffer, i);
    g.event_count = g.event_count + 1;
    pong_update(ref g.state, e);
  }
}

reactive input_tick = create_timer(10);

reactive input_events = container(
  observe input_tick,
  EventList::new(),
  fun(es : ptr EventList, tick : ptr i64) {
    flush_and_poll_input(*es, *tick)
  }
);

def scrub_view = create_scrub_view("Events", 400, 50);

reactive scrub = container(
  observe input_events,
  create_scrub(scrub_view),
  scrub_handle_events,
);

render_scrub(ref scrub);

reactive frame_tick = create_timer(1000/30);

reactive frame_events = container(
  observe frame_tick,
  EventList::new(),
  fun(es : ptr EventList, tick : ptr i64) {
    EventList::clear(*es);
    let e = init Event(tick_event_tag, zero_init SdlEvent, *tick);
    EventList::add(*es, e);
  }
);

def event_sources = [input_events, frame_events];

reactive new_pong_events = container(
  observe event_sources,
  new_merge(),
  fun(buf : ptr MergeBuffer, sources : ptr sized_array(EventList, 2)) {
    merge_update(buf, (*sources)[0], (*sources)[1])
  }
);

reactive pong_events = container(
  observe new_pong_events,
  EventList::new(),
  fun(buffer : ptr EventList, es : ptr MergeBuffer) {
    let start_len = buffer.length;
    EventList::append(*buffer, es.list);
    let changed = buffer.length > start_len;
    changed
  }
);

// def buffer_size = 1050;
// def tweaked_buffer = init EventBuffer(
//   buffered_events.list,
//   (buffer_size * scrub.slider_val) / 100,
// );

reactive pong = {
  let g = new_buffered_pong(initial_pong_state);
  container(observe pong_events, g, buffered_pong_update)
}

def renderer = create_renderer(window);

render_game(renderer, ref pong.state);

sdl_img_init(IMG_INIT_PNG);
