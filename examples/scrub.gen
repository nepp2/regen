
def ScrubView = struct {
  width : i64,
  height : i64,
  window : SdlWindowHandle,
  window_id : u32,
  renderer : SdlRendererHandle,
}

def Scrub = struct {
  view : ScrubView,
  val : i64,
  mouse_down : bool,
}

def scrub_update = fun(scrub : ptr Scrub, ge : ptr GameEvent) {
  // handle time events
  let e = ref ge.input;
  if e.event_type == SDL_MOUSEDOWN {
    let me = to_mouse_button_event(e);
    if me.window_id == scrub.view.window_id {
      scrub.val = ((me.x as i64) * 100) / scrub.view.width;
      scrub.mouse_down = true;
      return true;
    }
  }
  if e.event_type == SDL_MOUSEUP {
    let me = to_mouse_button_event(e);
    if me.window_id == scrub.view.window_id {
      scrub.mouse_down = false;
      return true;
    }
  }
  if e.event_type == SDL_MOUSEMOTION {
    if scrub.mouse_down {
      let mm = to_mouse_motion_event(e);
      if mm.window_id == scrub.view.window_id {
        scrub.val = ((mm.x as i64) * 100) / scrub.view.width;
        return true;
      }
    }
  }
  false
}

def new_rect = fun(x : i64, y : i64, w : i64, h : i64) {
  init SdlRect(x as i32, y as i32, w as i32, h as i32)
}

def set_color = fun(rend: SdlRendererHandle, r : i64, g : i64, b : i64) {
  sdl_set_draw_color(rend, r as u8, g as u8, b as u8, 255 as u8);
}

def render_scrub = fun (scrub : ptr Scrub) {
  let r = scrub.view.renderer;
  // render
  set_color(r, 0, 0, 0);
  sdl_clear(r);

  let button_size = scrub.view.height;

  let play_pause_rect = new_rect(0, 0, button_size, button_size);
  let record_rect = new_rect(button_size, 0, button_size, button_size);
  let stop_rect = new_rect(button_size * 2, 0, button_size, button_size);

  let slider_offset = button_size * 3;
  let slider_length = scrub.view.width - slider_offset;
  let slider_pos = ((slider_length as i64) / 100) * scrub.val;

  let slider_rect = new_rect(slider_offset, 0, slider_pos, scrub.view.height);

  set_color(r, 0, 255, 0);
  sdl_fill_rect(r, ref play_pause_rect);
  set_color(r, 255, 255, 0);
  sdl_fill_rect(r, ref record_rect);
  set_color(r, 0, 0, 255);
  sdl_fill_rect(r, ref stop_rect);

  set_color(r, 255, 0, 0);
  sdl_fill_rect(r, ref slider_rect);

  sdl_present(r);
};

def create_scrub_view = fun(name : string, width : i64, height : i64) {
  let window = create_game_window(name, width, height);
  let window_id = sdl_get_window_id(window);
  let renderer =
    sdl_create_renderer(window, -1 as i32, SDL_RENDERER_ACCELERATED);
  init ScrubView(width, height, window, window_id, renderer)
}


def create_scrub = fun(view : ScrubView) {
  init Scrub(view, 100, false)
}
