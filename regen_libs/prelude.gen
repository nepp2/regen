
def WatcherConstructor = poly_type(ReactiveConstructor, String);

def create_watcher = fun(path : String) {
  new_watcher_constructor(env, ref path) as WatcherConstructor;
};

def TimerConstructor = poly_type(ReactiveConstructor, i64);

def create_timer = fun(millisecond_interval : i64) {
  new_timer_constructor(env, millisecond_interval) as TimerConstructor;
};

def create_container = fun(
  input_signal : Signal,
  state_type : Type,
  initial_state : ptr void,
  update_function : ptr void)
{
  new_state_constructor(input_signal, state_type, initial_state, update_function)
};

def create_stream = fun(
  input_signal : Signal,
  state_type : Type,
  poll_function : ptr void)
{
  new_poll_constructor(input_signal, state_type, poll_function)
};

def load_module = fun(path : String) {
  load_expr(env, ref path)
}

def import = fun(path : String) {
  let symbol_expr = new_symbol_expr(env, ref path, #import_symbol);
  let path_expr = new_string_expr(env, ref path, #import_path);
  #(def_scope {
    reactive $symbol_expr = create_watcher($path_expr);
    embed load_module($symbol_expr);
  })
}

def load_library = fun(path : String) {
  ffi_load_library(ref path)
}

def load_library_symbol = fun(lib : Library, path : String) {
  ffi_load_library_symbol(lib, ref path)
}

def min = fun(a : i64, b : i64) {
  if a < b { a } else { b }
}

def max = fun(a : i64, b : i64) {
  if a > b { a } else { b }
}

def min_u64 = fun(a : u64, b : u64) {
  if a < b { a } else { b }
}

def max_u64 = fun(a : u64, b : u64) {
  if a > b { a } else { b }
}
